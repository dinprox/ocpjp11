Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"EntryPointsManager\">\r\n    <entry_points version=\"2.0\" />\r\n  </component>\r\n  <component name=\"ProjectKey\">\r\n    <option name=\"state\" value=\"project://e2804f05-5315-4fc6-a121-c522a6c26470\" />\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" default=\"true\" project-jdk-name=\"11\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision b261c75424a3027c6ff2fa810f8b103ae23596a3)
+++ .idea/misc.xml	(date 1600379425182)
@@ -1,12 +1,9 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="EntryPointsManager">
-    <entry_points version="2.0" />
-  </component>
   <component name="ProjectKey">
     <option name="state" value="project://e2804f05-5315-4fc6-a121-c522a6c26470" />
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="11" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_X" default="true" project-jdk-name="16" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
Index: CH01_Java_Fundamentals/src/JavaFundamentals.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import com.ocpjp11.Testeable;\r\n\r\nimport static java.lang.Math.*;\r\n\r\npublic class JavaFundamentals implements Testeable {\r\n\r\n    final int CONSTANT = 1;\r\n    final int CONSTANT2;\r\n    final static int STATIC_CONSTANT;\r\n\r\n    static {\r\n        STATIC_CONSTANT = 4;\r\n    }\r\n    public JavaFundamentals() {\r\n        CONSTANT2 = 2;\r\n    }\r\n\r\n    // When method is final, it can not be overridden by subclasses\r\n    public final void test(){\r\n\r\n        // It must be assigned a value before it can be used WHEN LOCAL\r\n\r\n        final int LOCAL_CONST;\r\n        int number = (int)(random() *100);\r\n        if (number == 3) LOCAL_CONST = 5;\r\n        else\r\n            LOCAL_CONST = 4;\r\n\r\n        System.out.println(\"Final local constant value assigned at runtime: \" + LOCAL_CONST);\r\n\r\n        //Enums\r\n        System.out.println(\"Working with enums.....\");\r\n        Season s = Season.SUMMER;\r\n        System.out.println(s);\r\n        // Can compare using == or equals(), is the same\r\n        System.out.println(s == Season.SUMMER);\r\n        System.out.println(s.equals(Season.SUMMER));\r\n\r\n        // name() and ordinal() methods of all ENUMS\r\n        for (Season season : Season.values()){\r\n            System.out.println(\"Name of Season> \" + season.name() + \" ordinal number> \"+ season.ordinal());\r\n        }\r\n\r\n        // Invalid compare enum with primitive types\r\n//        if (Season.SUMMER == 2)\r\n\r\n        // Enum value MUST MATCH EXACTLY\r\n        Season s1 =  Season.valueOf(\"SUMMER\"); // OK\r\n//        Season s2 = Season.valueOf(\"summer\"); // NOT OK, RUNTIME EXCEPTION, ILLEGAL ARGUMENT EXCEPTION\r\n\r\n        // USING ENUMS WITH SWITCH STATEMENTS\r\n\r\n        switch (s1){\r\n            case SUMMER:\r\n                System.out.println(\"IT IS SUMMER\");\r\n                break;\r\n//            case Season.SPRING: // DOES NOT COMPILE\r\n//            case 0: // DOES NOT COMPILE\r\n                case ALL:\r\n                System.out.print(\"It is ALL \");\r\n        }\r\n\r\n    }\r\n\r\n    // CREATE AND USE FINAL CLASSES\r\n    // Mark class as final avoid this to be extended by subclasses.\r\n    final class MyFinalClass {\r\n\r\n    }\r\n\r\n    // WORKING WITH ENUMS\r\n    enum Season{\r\n        WINTER, SPRING, SUMMER, ALL\r\n    }\r\n\r\n    // CONSTRUCTORS, FIELDS AND METHODS INSIDE ENUMS\r\n    enum ZOO {\r\n        ZOO(){\r\n\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- CH01_Java_Fundamentals/src/JavaFundamentals.java	(revision b261c75424a3027c6ff2fa810f8b103ae23596a3)
+++ CH01_Java_Fundamentals/src/JavaFundamentals.java	(date 1600381308588)
@@ -41,11 +41,11 @@
             System.out.println("Name of Season> " + season.name() + " ordinal number> "+ season.ordinal());
         }
 
-        // Invalid compare enum with primitive types
+//        Invalid compare enum with primitive types
 //        if (Season.SUMMER == 2)
 
         // Enum value MUST MATCH EXACTLY
-        Season s1 =  Season.valueOf("SUMMER"); // OK
+        Season s1 =  Season.valueOf("SUMMER");  // OK
 //        Season s2 = Season.valueOf("summer"); // NOT OK, RUNTIME EXCEPTION, ILLEGAL ARGUMENT EXCEPTION
 
         // USING ENUMS WITH SWITCH STATEMENTS
Index: CH01_Java_Fundamentals/src/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import com.ocpjp11.Testeable;\r\n\r\npublic class Main {\r\n    /* OBJECTIVES COVERED IN THIS MODULE\r\n    1.1 JAVA FUNDAMENTALS\r\n    1.2 JAVA INTERFACES\r\n    1.3 FUNCTIONAL INTERFACE AND LAMBDA EXPRESSIONS\r\n     */\r\n    static Testeable mTest;\r\n\r\n    public static void main(String[] args) {\r\n        mTest = new JavaFundamentals();\r\n//        mTest = new JavaFundamentals();\r\n        mTest.test();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- CH01_Java_Fundamentals/src/Main.java	(revision b261c75424a3027c6ff2fa810f8b103ae23596a3)
+++ CH01_Java_Fundamentals/src/Main.java	(date 1600379818334)
@@ -9,8 +9,7 @@
     static Testeable mTest;
 
     public static void main(String[] args) {
-        mTest = new JavaFundamentals();
-//        mTest = new JavaFundamentals();
-        mTest.test();
+       new JavaFundamentals().test();
+       new JavaInterfaces().test();
     }
 }
